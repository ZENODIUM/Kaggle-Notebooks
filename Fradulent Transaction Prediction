{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8449794,"sourceType":"datasetVersion","datasetId":5035433}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Fradulent Transaction Prediction","metadata":{}},{"cell_type":"code","source":"\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report, roc_auc_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-15T13:16:30.647627Z","iopub.execute_input":"2024-06-15T13:16:30.648021Z","iopub.status.idle":"2024-06-15T13:16:31.678093Z","shell.execute_reply.started":"2024-06-15T13:16:30.647989Z","shell.execute_reply":"2024-06-15T13:16:31.677034Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/fraud-detection-dynamics-financial-transaction/Transactions Data.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/fraud-detection-dynamics-financial-transaction/Transactions Data.csv\")\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-15T13:16:31.680192Z","iopub.execute_input":"2024-06-15T13:16:31.680752Z","iopub.status.idle":"2024-06-15T13:16:44.756565Z","shell.execute_reply.started":"2024-06-15T13:16:31.680714Z","shell.execute_reply":"2024-06-15T13:16:44.755585Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   step      type    amount     nameOrig  oldbalanceOrg  newbalanceOrig  \\\n0     1   PAYMENT   9839.64  C1231006815       170136.0       160296.36   \n1     1   PAYMENT   1864.28  C1666544295        21249.0        19384.72   \n2     1  TRANSFER    181.00  C1305486145          181.0            0.00   \n3     1  CASH_OUT    181.00   C840083671          181.0            0.00   \n4     1   PAYMENT  11668.14  C2048537720        41554.0        29885.86   \n\n      nameDest  oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  \n0  M1979787155             0.0             0.0        0               0  \n1  M2044282225             0.0             0.0        0               0  \n2   C553264065             0.0             0.0        1               0  \n3    C38997010         21182.0             0.0        1               0  \n4  M1230701703             0.0             0.0        0               0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>step</th>\n      <th>type</th>\n      <th>amount</th>\n      <th>nameOrig</th>\n      <th>oldbalanceOrg</th>\n      <th>newbalanceOrig</th>\n      <th>nameDest</th>\n      <th>oldbalanceDest</th>\n      <th>newbalanceDest</th>\n      <th>isFraud</th>\n      <th>isFlaggedFraud</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>PAYMENT</td>\n      <td>9839.64</td>\n      <td>C1231006815</td>\n      <td>170136.0</td>\n      <td>160296.36</td>\n      <td>M1979787155</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>PAYMENT</td>\n      <td>1864.28</td>\n      <td>C1666544295</td>\n      <td>21249.0</td>\n      <td>19384.72</td>\n      <td>M2044282225</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>TRANSFER</td>\n      <td>181.00</td>\n      <td>C1305486145</td>\n      <td>181.0</td>\n      <td>0.00</td>\n      <td>C553264065</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>CASH_OUT</td>\n      <td>181.00</td>\n      <td>C840083671</td>\n      <td>181.0</td>\n      <td>0.00</td>\n      <td>C38997010</td>\n      <td>21182.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>PAYMENT</td>\n      <td>11668.14</td>\n      <td>C2048537720</td>\n      <td>41554.0</td>\n      <td>29885.86</td>\n      <td>M1230701703</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-15T13:16:44.758124Z","iopub.execute_input":"2024-06-15T13:16:44.758434Z","iopub.status.idle":"2024-06-15T13:16:44.769525Z","shell.execute_reply.started":"2024-06-15T13:16:44.758408Z","shell.execute_reply":"2024-06-15T13:16:44.768577Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 6362620 entries, 0 to 6362619\nData columns (total 11 columns):\n #   Column          Dtype  \n---  ------          -----  \n 0   step            int64  \n 1   type            object \n 2   amount          float64\n 3   nameOrig        object \n 4   oldbalanceOrg   float64\n 5   newbalanceOrig  float64\n 6   nameDest        object \n 7   oldbalanceDest  float64\n 8   newbalanceDest  float64\n 9   isFraud         int64  \n 10  isFlaggedFraud  int64  \ndtypes: float64(5), int64(3), object(3)\nmemory usage: 534.0+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"\nprint(df.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-06-15T13:16:44.772235Z","iopub.execute_input":"2024-06-15T13:16:44.773050Z","iopub.status.idle":"2024-06-15T13:16:45.766785Z","shell.execute_reply.started":"2024-06-15T13:16:44.773014Z","shell.execute_reply":"2024-06-15T13:16:45.765816Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"step              0\ntype              0\namount            0\nnameOrig          0\noldbalanceOrg     0\nnewbalanceOrig    0\nnameDest          0\noldbalanceDest    0\nnewbalanceDest    0\nisFraud           0\nisFlaggedFraud    0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"print(df['type'].value_counts())\nprint(df['isFraud'].value_counts())\nprint(df['isFlaggedFraud'].value_counts())\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T13:16:45.768474Z","iopub.execute_input":"2024-06-15T13:16:45.768795Z","iopub.status.idle":"2024-06-15T13:16:46.383497Z","shell.execute_reply.started":"2024-06-15T13:16:45.768769Z","shell.execute_reply":"2024-06-15T13:16:46.382511Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"type\nCASH_OUT    2237500\nPAYMENT     2151495\nCASH_IN     1399284\nTRANSFER     532909\nDEBIT         41432\nName: count, dtype: int64\nisFraud\n0    6354407\n1       8213\nName: count, dtype: int64\nisFlaggedFraud\n0    6362604\n1         16\nName: count, dtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\ncategorical_cols = ['type']\nnumeric_cols = ['amount', 'oldbalanceOrg', 'newbalanceOrig', 'oldbalanceDest', 'newbalanceDest']\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', StandardScaler(), numeric_cols),\n        ('cat', OneHotEncoder(), categorical_cols)\n    ])\n\nX = df.drop(['isFraud'], axis=1)\ny = df['isFraud']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nX_train = preprocessor.fit_transform(X_train)\nX_test = preprocessor.transform(X_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T13:16:46.385229Z","iopub.execute_input":"2024-06-15T13:16:46.385545Z","iopub.status.idle":"2024-06-15T13:16:53.449992Z","shell.execute_reply.started":"2024-06-15T13:16:46.385518Z","shell.execute_reply":"2024-06-15T13:16:53.448937Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"\nmodels = {\n    'Logistic Regression': LogisticRegression(max_iter=1000),\n    'Decision Tree': DecisionTreeClassifier(),\n}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    print(f\"{name}\")\n    print(classification_report(y_test, y_pred))\n    print(\"ROC-AUC:\", roc_auc_score(y_test, y_pred))\n\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-15T13:17:19.586835Z","iopub.execute_input":"2024-06-15T13:17:19.587505Z","iopub.status.idle":"2024-06-15T13:18:38.748007Z","shell.execute_reply.started":"2024-06-15T13:17:19.587473Z","shell.execute_reply":"2024-06-15T13:18:38.746983Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Logistic Regression\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00   1270904\n           1       0.90      0.39      0.55      1620\n\n    accuracy                           1.00   1272524\n   macro avg       0.95      0.70      0.77   1272524\nweighted avg       1.00      1.00      1.00   1272524\n\nROC-AUC: 0.6965773988193725\nDecision Tree\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00   1270904\n           1       0.91      0.90      0.90      1620\n\n    accuracy                           1.00   1272524\n   macro avg       0.95      0.95      0.95   1272524\nweighted avg       1.00      1.00      1.00   1272524\n\nROC-AUC: 0.94932330951671\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}